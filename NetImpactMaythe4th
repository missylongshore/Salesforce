<apex:page standardController="Opportunity" extensions="PrdEntryExtNetImpact" action="{!priceBookCheck}" >
 <apex:sectionHeader Title="Manage Services" subtitle="{!opportunity.Name}"/>
 <apex:messages style="color:red"/>

    <script type='text/javascript'>
        var waitTime = 1;
        var countDown = waitTime+1;
        var started = false;
        function resetTimer(){ countDown=waitTime+1;
            if(started==false){ started=true; runCountDown(); } }
        function runCountDown(){ countDown--;
            if(countDown<=0){ fetchResults(); started=false; }
            else{ window.setTimeout(runCountDown,1000); } }
    </script>
     
 <apex:form >
  <apex:outputPanel id="mainBody">               

  <apex:pageBlock title="Existing Services" id="selected">                    
   <apex:pageblockTable value="{!shoppingCart}" var="s">                                    
    <apex:column headerValue="Product Name" value="{!s.PriceBookEntry.Product2.Name}"/>                  
    <apex:column headerValue="Quantity">
     <apex:inputField value="{!s.Quantity}" style="width:70px" required="true" onkeyup="refreshTotals();"/>
    </apex:column>                    
    <apex:column headerValue="Unit Price">
     <apex:inputField value="{!s.UnitPrice}" style="width:70px" required="true" onkeyup="refreshTotals();"/>
    </apex:column>                    
    <apex:column headerValue="Start Date">
     <apex:inputField value="{!s.ServiceDate}"/>
    </apex:column>                    
    <apex:column headerValue="End Date">
     <apex:inputField value="{!s.End_Date__c}"/>
    </apex:column>                        
    <apex:column headerValue="Please Read">
     <apex:inputField value="{!s.PriceBookEntry.Product2.IfCampaigntheExpoorMemb__c}"/>
    </apex:column> 
<!--    <apex:column headerValue="Description"> -->
<!--     <apex:inputField value="{!s.Description}" required="false"/> -->
<!--    </apex:column> -->
    <apex:column >
     <apex:commandLink value="Delete" action="{!removeFromShoppingCart}" reRender="selected,availableservices" immediate="true">
      <apex:param value="{!s.PriceBookEntryId}" assignTo="{!toUnselect}" name="toUnselect"/>
     </apex:commandLink>
    </apex:column>                 
   </apex:pageblockTable>                     
   <apex:pageBlockButtons >
    <apex:commandButton action="{!onSave}" value="Save"/>
    <apex:commandButton action="{!onCancel}" value="Cancel" immediate="true"/>
   </apex:pageBlockButtons>            
  </apex:pageBlock>

  <apex:pageBlock >
   <apex:outputPanel styleClass="search">
     <b>Search Services:&nbsp;&nbsp;&nbsp;</b>
   </apex:outputPanel>
   <apex:actionRegion renderRegionOnly="false" immediate="true">              
    <apex:actionFunction name="fetchResults" action="{!updateAvailableList}" reRender="availableservices"/>                    
    <apex:inputText value="{!searchString}" onkeydown="if(event.keyCode==13){this.blur();} else{resetTimer();}" style="width:300px"/>
    &nbsp;&nbsp;
    <apex:actionStatus id="searchStatus" startText="searching..." stopText=" "/>                    
   </apex:actionRegion>            
   <br/>
   <br/>            
   <apex:outputPanel id="availableservices">             
    <apex:pageBlockTable value="{!AvailableProducts}" var="a">                    
     <apex:column width="5%"  headerValue="Add">
      <apex:commandButton value="Add" action="{!addToShoppingCart}" reRender="selected,availableservices" immediate="true">
       <apex:param value="{!a.Id}" assignTo="{!toSelect}" name="toSelect"/>
      </apex:commandButton>
     </apex:column>                        
     <apex:column headerValue="Product Name" value="{!a.Product2.Name}" />                      
    </apex:pageBlockTable>                    
   </apex:outputPanel>            
  </apex:pageBlock>
            
  </apex:outputPanel>
 </apex:form>
</apex:page>

public with sharing class PrdEntryExtNetImpact {

    public Opportunity theOpp {get;set;}
    public String searchString {get;set;}
    public opportunityLineItem[] shoppingCart {get;set;}
    public priceBookEntry[] AvailableProducts {get;set;}
    public Pricebook2 theBook {get;set;}   
    public String toSelect {get; set;}
    public String toUnselect {get; set;}
    public Decimal Total {get;set;}
    public Boolean overLimit {get;set;}
    public Boolean multipleCurrencies {get; set;}
    private Boolean forcePricebookSelection = false;
    private opportunityLineItem[] forDeletion = new opportunityLineItem[]{};

    public PrdEntryExtNetImpact(ApexPages.StandardController controller) {
        multipleCurrencies = UserInfo.isMultiCurrencyOrganization();
        if(multipleCurrencies)
            theOpp = database.query('select Id, Pricebook2Id, Pricebook2.Name, CurrencyIsoCode from Opportunity where Id = \'' + controller.getRecord().Id + '\' limit 1');
        else
            theOpp = [select Id, Pricebook2Id, PriceBook2.Name from Opportunity where Id = :controller.getRecord().Id limit 1];
        shoppingCart = [select Id, Quantity, TotalPrice, UnitPrice, ServiceDate, End_Date__c, PriceBookEntry.Product2.ifCampaigntheExpoorMemb__c, Description, PriceBookEntryId, PriceBookEntry.Name, PriceBookEntry.IsActive, PriceBookEntry.Product2Id, PriceBookEntry.Product2.Name, PriceBookEntry.PriceBook2Id from opportunityLineItem where OpportunityId=:theOpp.Id];
        if(theOpp.Pricebook2Id == null){
            Pricebook2[] activepbs = [select Id, Name from Pricebook2 where isActive = true limit 2];
            if(activepbs.size() == 2){
                forcePricebookSelection = true;
                theBook = new Pricebook2();
            }
            else{
                theBook = activepbs[0];
            }
        }
        else{
            theBook = theOpp.Pricebook2;
        }
        if(!forcePricebookSelection)
            updateAvailableList();
    }
    
    public PageReference priceBookCheck(){
        if(forcePricebookSelection){        
            return changePricebook();
        }
        else{
            if(theOpp.pricebook2Id != theBook.Id){
                try{
                    theOpp.Pricebook2Id = theBook.Id;
                    update(theOpp);
                }
                catch(Exception e){
                    ApexPages.addMessages(e);
                }
            }
            return null;
        }
    }
       
    public String getChosenCurrency(){
        if(multipleCurrencies)
            return (String)theOpp.get('CurrencyIsoCode');
        else
            return '';
    }

    public void updateAvailableList() {
        String qString = 'select Id, Pricebook2Id, IsActive, Product2.IfCampaigntheExpoorMemb__c, Product2.Duration__c, Product2.Name, Product2.Family, Product2.IsActive, Product2.Description, UnitPrice from PricebookEntry where IsActive=true and Pricebook2Id = \'' + theBook.Id + '\'';
        if(multipleCurrencies)
            qstring += ' and CurrencyIsoCode = \'' + theOpp.get('currencyIsoCode') + '\'';
        if(searchString!=null){
            qString+= ' and (Product2.Name like \'%' + searchString + '%\' or Product2.Description like \'%' + searchString + '%\')';
        }        
        Set<Id> selectedEntries = new Set<Id>();
        for(opportunityLineItem d:shoppingCart){
            selectedEntries.add(d.PricebookEntryId);
        }        
        if(selectedEntries.size()>0){
            String tempFilter = ' and Id not in (';
            for(Id i : selectedEntries){
                tempFilter+= '\'' + (String)i + '\',';
            }
            String extraFilter = tempFilter.substring(0,tempFilter.length()-1);
            extraFilter+= ')';
            
            qString+= extraFilter;
        }        
        qString+= ' order by Product2.Name';
        qString+= ' limit 101';        
        system.debug('qString:' +qString);        
        AvailableProducts = database.query(qString);        
        if(AvailableProducts.size()==101){
            AvailableProducts.remove(100);
            overLimit = true;
        }
        else{
            overLimit=false;
        }
    }
    
    public void addToShoppingCart(){
        for(PricebookEntry d : AvailableProducts){
            if((String)d.Id==toSelect){
                date dt=null;
                if (d.Product2.Duration__c!=null)
                 dt=System.today().addMonths(Integer.valueOf(d.Product2.Duration__c));
                shoppingCart.add(new opportunityLineItem(OpportunityId=theOpp.Id, PriceBookEntry=d, PriceBookEntryId=d.Id, UnitPrice=d.UnitPrice, End_Date__c=dt));
                break;
            }
        }        
        updateAvailableList();  
    }   

    public PageReference removeFromShoppingCart(){
        Integer count = 0;    
        for(opportunityLineItem d : shoppingCart){
            if((String)d.PriceBookEntryId==toUnselect){
            
                if(d.Id!=null)
                    forDeletion.add(d);
            
                shoppingCart.remove(count);
                break;
            }
            count++;
        }        
        updateAvailableList();        
        return null;
    }
    
    public PageReference onSave(){
        if(forDeletion.size()>0)
            delete(forDeletion);
        try{
            if(shoppingCart.size()>0)
                upsert(shoppingCart);
        }
        catch(Exception e){
            ApexPages.addMessages(e);
            return null;
        }  
        return new PageReference('/' + ApexPages.currentPage().getParameters().get('Id'));
    }
    
    public PageReference onCancel(){
        return new PageReference('/' + ApexPages.currentPage().getParameters().get('Id'));
    }
    
    public PageReference changePricebook(){
        PageReference ref = new PageReference('/oppitm/choosepricebook.jsp');
        ref.getParameters().put('id',theOpp.Id);
        ref.getParameters().put('retURL','/apex/opportunityProductEntry?id=' + theOpp.Id);       
        return ref;
    }
}
